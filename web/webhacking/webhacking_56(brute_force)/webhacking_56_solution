문제에 접속하면 테이블에 no=1의 admin과 no=2의 guest 의 레코드가 각각보인다.

각각의 레코드에 subject 칼럼을 통해 내부 내용에 접속할수있다. 접속해보자

admin의 subject 'readme'에 들어가면 접근금지라고 뜬다.
guest의 subject 'hi~'에 들어가면 hello~ 라는 글이 있다.

그리고 테이블 아래에 보면 검색기능이 있다. 
모든 칼럼들 그리고 값들을 검색해보았지만 테이블이 없어지기만 하는 현상이 발생했다.

분명 select문으로 테이블을 가져오는 기능일 텐데...하고 생각중일때 
혹시나 하는 마음에 아까 봤던 subject의 내용을 입력해보았더니 테이블이 정상적으로 출력되었다.
(물론, guest꺼만 출력된다.)

이를 통해 admin의 subject 내용을 추출해내는 것이 이번 문제의 목표임을 알 수 있다.

select * from [table_name] where [subject 내용]={search}

위와 같이 쿼리를 예상할 수 있다. 우선 여러 sql문을 넣어보면서 필터링이 존재하는지 확인해보자

hello~'#와 같이 쿼리문을 넣어보았으나 인젝션이 되지않는다. 아마 search를 통해서 인젝션 할 수는 없는 듯 하다.

특이한 것은 0을 넣으면 테이블이 모두 출력되고 1을 넣으면 출력되지 않는다.

흠...이게 뭐지 고민하던중 혹시나 하는 마음에 hello~중에 h만 넣어보았다.

테이블이 모두 출력된다!! he까지 넣어보았으나 이번에는 guest의 레코드만 출력된다.

이것을 통해 내용에 입력한 문자열이 존재하면 테이블의 레코드가 나온다는 사실을 알 수 있다.

우선 모든 문자를 넣어보면서 admin의 레코드가 나오는 문자들만 골라보자

?ACDFGIKMNSTUYacdfgikmnstuy{} (webhacking_56-1.py)

위 문자열들이 포함된다는 것을 확인했다.

우선 FLAG{ 가 맨 앞부분이라고 우린 계속 플래그값을 봐왔음으로 추측해볼 수 있고 실제로 입력했을때 맞다는 것을 확인 할 수 있다.

이제 계속 무작위로 대입하면서 하나씩 맞춰보면 되겠다.

계속 brute force를 시도해보았는데 자꾸 44번째 이후부터 출력이 안된다... 왜 안되는지 한참을 삽질하다가 소문자가 하나도 출력되지않는 것을 보고 소문자영역만 기준으로 잡고 부르트 포싱해보았더니 그전에 출력했던 대문자가 소문자로 바뀌어서 출력되었으며 12번째 부터 출력이 안되었다.

우선 sql같은 경우 대소문자를 구분하지 않기 때문에 대문자와 소문자를 같은 문자로 인식하는 것은 예전 문제에서도 알 수 있었다. (여기서 실제 flag값은 소문자일 것이라고 추측해볼수있다. 다른 문제도 그랬었으니까) 근데 여기서 12번째부터 왜 출력이 안되나 생각해보니 소문자영역으로만 기준으로 잡아서 '_' 문자가 출력이 안된 것이다. 다행히 아스키코드 순서가 '_' 이후 소문자라 이것을 포함해서 기준으로 잡고 코드를 실행해보니...???? 모든 출력값이 '_'으로 나온다...? 그렇다 _는 와일드카드 문자로 이것을 이용해 실제로 flag값의 길이를 알 수 있었다. 
그렇다면 
FLAG{HIMIKO_TOGA_IS_CUTE_DONT_YOU_THINK_SO?_ 
위 값까지만 출력되고 출력이 안된것은 맨마지막 '_'이 와일드 카드 문자이기 때문이다!!

따라서 flag값은 
FLAG{himiko_toga_is_cute_dont_you_think_so?}
이것일 것이다!! 넣어보자

클리어!!

추가적으로 계속 의문이였던 
종종 sql인젝션 문제를 풀때 python으로 무작위로 대입하여 값을 알아낼때 
내가 원하는 문자가 아닌 %가 전부 출력되는 경우가 있었다.(이번문제도 마찬가지! 코드를 보면 %는 걸러내고있다.)
이번 문제를 통해 %,_ 이 두 문자는 sql에서 와일드카드 문자로 실제로는 이값이 아니여도 이값이 맞다고 인식하는 문자이다. (즉, 'a' == '%' , 'g' == '%' 와 같이 어떤 값과 비교해도 참이 나온다.)

앞으로 문제를 풀때 매우 중요한점 일 듯 하다!




