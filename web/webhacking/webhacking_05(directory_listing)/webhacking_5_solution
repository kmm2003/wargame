login 과 join 두가지로 나누어져있다 한번씩 눌러보도록하자

login을 눌렀더니 로그인을 하게끔 창이 만들어져있다 아무값이나 넣어보니 잘못됬다고 떠서
나의 webhacking 계정을 넣어봤다. 역시나 안된다
뒤로간후 join을 한번 눌러보자

join을 눌렀더니 엑세스가 거부되었다. 과연 이 문제의 목적은 무엇일까?? 소스코드를 한번봐보자

소스코드를 보아도 목적이 따로 표시되어있지는 않다. 아마 스스로 추측하라는 의도인 것 같은데
예상을 해보면 느낌상?? 왠지 admin으로 로그인을 하는게 목표?이지 않을까 생각해본다.

소스코드에는 딱히 특별한 건 없지만 그중에서 login 버튼을 누르면 /mem/login.php로 이동하게 되어있는걸 확인할 수있다.
이걸 /mem으로 이동하게 한번 바꿔보겠다.
콘솔창으로 이용하여 /mem으로 이동하게끔 move함수를 재정의하고 login 버튼을 눌러보았다.

그러자 mem 디렉토리로 접속을 하게되었다. 아마 이 페이지는 디렉토리 리스팅이 가능한 취약한
페이지였나보다.

mem 디렉토리에 보면 우리가 봤던 login.php와 함께 join.php가 있다.
아까 join을 눌렀을때 접근이 거부되었는데 이걸로 접근하면 접근이 가능할 것 같다.

join.php에 접근해보니 bye라는 alert창이 뜨면서 창이 비어있다. 소스코드를 한번봐보니 스크립트
태그에 이상한 암호화???된 소스코드가 있는 것을 확인 할 수 있다.
코드를 복사하여 확인해보니 문자들이 이상한 형태로 정의가 되어있는 것을 볼 수있다.
이것을 python을 이용하여 해석을 해보도록 하겠다.(webhacking_5-1.py)

위 python 코드를 실행하여 ;를 경계로 나누어 좀 더 보기 편하게 소스코드를 변환하였다.
그러나 아직 이상하게 선언된 변수들 때문에 아래쪽 코드를 해석하기가 불편하기 때문에 python을 이용하여 다시한번 코드를 더 보기 편하게 바꿔보겠다.(webhacking_5-2.py)

위에 코드 결과를 토대로 소스코드를 해석해보면 
if(eval('document.cookie').indexOf('oldzombie')==-1){
    alert('bye')
}
if(eval('document.URL').indexOf('mode=1')==-1){
    alert('access_denied');
}
else{
    document.write('<form method=post action=join.php>')
    document.write('<table border=1><tr><td><font color=gray>id</font></        td><td><input type=text name=id maxlength=20></td></tr>')
    document.write('<tr><td><font color=gray>pass</font></td><td><input     type=text name=pw></td></tr>')
}
이런식으로 해석이 된다. 즉, document.cookie값에 oldzombie 문자열이 포함되고 document.URL에 mode=1이 포함되어야 alert창이 안뜬다. 콘솔창을 이용하여 바꿔보자

바꿔서 페이지를 리로드 해보니 아이디를 생성할수있는 join창이 떴다. 맨 처음에 추측한 것처럼 admin으로 로그인할 수있게 admin 계정을 생성해 보겠다.
admin계정을 생성해보았더니 이미 생성된 계정이라고 뜬다....흠
취약한 php의 경우 빈 공백을 무시하고 데이터베이스에 계정을 만들거나 select 하는 경우가 있기 때문에 이를 이용하여 공백+admin의 식으로 계정을 생성해보겠다
생성해보니 admin 계정이 성공적으로 생성되었다. 로그인을 한번해보자
성공적으로 로그인이 되면서 클리어되었다!!








