24번 문제를 접속해보니 클라이언트 ip와 user-agent 정보가 출력되어 테이블 형태로 표현되고 있다.

소스를 확인해보겠다.

소스에서 제일먼저 extract() 함수를 이용하여 $_server , $_cookie 두개의 객체의 키들을 변수의 값으로 할당을 해주고있다.

extract() ==> 인자로 주어진 객체 또는 딕셔너리의 key값들을 각각의 변수로 변환하여 선언된 것처럼 표현시켜주는 함수

ex) 
ms={'m':'1','s':'2'}
extract(ms) ==> m=1; s=2; 와 같은 형태로 변환 시켜준다. 즉, m과 s를 각각의 변수로 선언시켜주는 함수

그 후 $ip에는 클라이언트의 ip가  $agent에는 user-agent 정보값이 들어간다.

그리고 ip값이 존재한다면 ip값의 특수문자들을 html 엔티티로 변환시킨다
ex) < ==> &lt , > ==> &gt , & ==> &amp 등등으로 변환시켜준다. 이것은 XSS공격을 방지하는데 굉장히 유용하다!

그 후 ip값을 4번의 케이스를 커쳐 변환한다.

그 다음에는 $agent값 또한 마찬가지로 특수문자들을 html 엔티티로 변환시킨 후 

$ip와 $agent 각각의 변수값들을 브라우저에 테이블 형태로 띄워준다.

이때 $ip값이 127.0.0.1이면 문제가 해결된다.

지금의 경우 $ip값이 127.0.0.1이 아니기 때문에 테이블과 함께 Wrong IP!라는 문자열이 출력된 것 같다.

여기까지 코드를 파악해보았을때 가장 중요한 부분은 extract 함수라고 생각이든다.
왜냐하면 결국에는 $REMOTE_ADDR의 값을 변환시켜야 하는데 extract 함수를 통해 이 변수를 우리가 원하는 값으로 초기화 할 수 있기 때문이다.

extract함수를 이용해 서버 객체와 쿠키 객체를 변환하고 있는데 쿠키는 브라우저의 개발자 도구를 통해 임의적으로 만들어 줄 수있고 따라서 REMOTE_ADDR=127.0.0.1을 만들고 페이지를 새로고침하면 클리어가 될 것이다!

쿠키를 생성하고 새로고침 해보자!!

해보니 클리어는 안되고 클라이언트 ip값이 1이라고 나온다...흠
소스코드를 다시봐보니 $REMOTE_ADDR 변수를 4번의 과정을 통해 문자열을 바꿔주고 있다. 이것때문에 127.0.0.1이 1이 된것같다. 확인해보자

1) ..을 .으로 변환   127.0.0.1 -> 127.0.0.1
2) 12를 공백으로 변환 127.0.0.1 -> 7.0.0.1
3) 7.를 공백으로 변환 7.0.0.1 -> 0.0.1
4) 0.를 공백으로 변환 0.0.1 -> 1

이런식으로 변환되는 것같다.... 2번과정부터 생각하여 문자열이 치환되더라도 우리가 원하는 127.0.0.1이 결과로 나오게끔 변수를 수정해보자!

1) 127.0.0.1
2) 11227.0.0.1
3) 112277...0.0.1
4) 112277...00...00...1 ==> 예상입력값

예상입력값을 토대로 4가지의 문자 치환을 시도해보겠다.
112277...00...00...1
1277..00..00..1
127.00..00..1
127.0.0.1

정상적으로 127.0.0.1이 나오는것을 알 수 있다.
한번 시도해보자

클리어!!



