힌트를 보니 sql injection 문제라고 한다.

문제에 접속하니 바로 소스부터 나오는데 소스를 해석해보자

1. id,pw 값에 information,schema,user 가 들어가면 안되며 (는 한번만 쓸 수 있다.
2. reset_flag 함수를 통해 쿼리를 실행한 갯수를 $count_column 변수로 카운팅하고 있으며
$flag_column 속성의 값을 반환하여 $tmp_flag에 저장한다.
3. select $pw_column from findflag_2 limit 1 쿼리를 실행 후 $pw_column 속성의 값을
$tmp_pw에 저장한다.
4. SELECT * FROM findflag_2 WHERE $id_column='{$id}' and $pw_column='{$pw}';
위 쿼리를 실행 후 반환값중 id_column 속성값이 존재하는 확인하고 
$pw === $tmp_pw && $flags === $tmp_flag 이면 문제가 해결된다.

우선 이번 문제의 경우 id와 pw파라미터에 대한 검증이 취약하다. 따라서
4번의 SELECT * FROM findflag_2 WHERE $id_column='{$id}' and $pw_column='{$pw}';
쿼리는 조작하기가 쉬울 것 같다.

SELECT * FROM findflag_2 WHERE $id_column='' union select 1,2,3,4,5 #' and $pw_column='';

위와 같은 쿼리를 조작해 만들어서 union select를 시도해 "Hello ...." 같은 문자열을 출력하는 것을 원했지만 결과가 나오지 않았다.

왜 안되는 건지 고민하던중 혹시나 하는 마음에 # 대신 %23을 보내보았더니
원하는 결과가 나온다!!(가끔 get으로 보낼때 escape를 해줘야 injection이 되는 경우가 있는데 이번이 그런경우인듯 하다.)

따라서 인젝션 결과로 findflag_2의 총 속성 갯수가 5개임을 알았고 id 속성은 두 번째 속성임을 알 수 있었다.

파라미터 검증이 별로없어서 쿼리조작이 쉬울줄 알았으나 속성같은 것들이 주어진 것이 너무 없고 메타데이터를 사용할 수 없기 때문에 쿼리 조작이 너무 어려웠다.

우선 우리가 알고있는 정보가 속성의 갯수가 5개라는 사실이기 때문에 order by문을 잘 이용하면 $id값을 알 수 있지 않을까 생각해보았고 
SELECT * FROM findflag_2 WHERE $id_column='' or 1 order by 5 limit 1 %23
위와 같은 쿼리를 만들어 보았다. 위 쿼리가 정상적으로 실행된다면 $query[$id_column]의 반환값으로 $id값이 반환될 것이다.
구해보니 adm1ngnngn라는 값이 나왔고 $id를 구했다.

$id를 구했으니 이번에는 $pw를 구해야하는데 
SELECT * FROM findflag_2 WHERE $id_column='' union select 1,' and $pw_cloumn=',3,4,5
위와 같이 union injection을 이용해 두 번째 속성의 값으로 ' and $pw_cloumn=' 를 넣어줌으로써 $pw_column값이 자연스럽게 나오게끔 쿼리를 짜서 출력되게 할 수 있다.
$pw_column이 xPw4coaa1sslfe라는 것을 구했고 이것을 이용해 $pw값을 구해보자
SELECT * FROM findflag_2 WHERE $id_column='' union select 1,xPw4coaa1sslfe,3,4,5 from findflag_2
위 쿼리를 실행시켜보니 !@SA#$! 라는 값이 $pw의 값으로 나왔다.

이제 $id,$pw를 모두 구하였으니 마지막으로 $flag값을 구할 차례이다.
$flag를 구하는 것이 매우 쿼리 짜기가 힘들었는데
SELECT * FROM findflag_2 WHERE $id_column='' union select 1,flag,3,4,5 from(select 1,2,3,4 flag,5 union select * from findflag_2 limit 1,1)x %23
$pw를 구할때와 마찬가지로 union을 썼지만 
좀 더 쿼리가 많이 복잡해졌는데 우리는 findflag_2의 속성명을 모르기 때문에
from문에서 select 숫자,숫자,숫자,숫자,숫자 조합으로 속성의 갯수를 5개로 맞춘 후 union을 붙여 뒤의 select문에 *을 써주어 속성명을 모르는 것을 우회했다.(limit 1,1인 이유는 레코드 최상단이 1,2,3,4,5로 이루어져있고 그다음 findflag_2 테이블의 데이터 값들이 들어갔을 것이기 때문에 두번째 레코드를 출력하기 위해 썼다.) 숫자 뒤에 alias를 이용해 flag라는 값을 하나주었고 (몇번째 속성이 flag값의 속성인지 모르기 때문에 하나씩 모두 노가다를 해보아야한다.) 이를 토대로 레코드 하나를 출력한 후
바깥 select문을 숫자,flag속성,숫자,숫자,숫자 조합으로 꾸려서 레코드에서 내가 flag라고 이름을 붙여준 속성의 데이터 값을 자연스럽게 출력하게끔 쿼리를 짰다.(flag속성이 두번째인 이유는 우리가 알다시피 출력하는 $id_column 변수의 속성순서가 두번째 이기 때문이다.)

이렇게 하여 flag값을 구해보니
sGedN2oWk904BA3TwmgfyMaOYpZSuLnCtFjhJrDHPQvzXbV7I1U85KcRx6lEqi라는 매우 긴 값이 나왔다.

이제 id,pw,flag 모두 구하였음으로 인자로 전송하여 authkey를 구해보자!!

....구하려고하니까 값이 나오지않고 계속 값이 나오지 않는다.....

왜 그런가하고 보니
위에서 처음에 union injection을 통해 속성 갯수를 구할때 마지막에 #이 아닌 %23을 써야 쿼리가 실행되는 것을
알 수 있었는데
$pw값에는 특수문자들이 들어가있고
아마 특수문자들이 인코딩이 안되서 값이 전송되고 따라서 값이 제대로 인식이 안되는 것 같다.
따라서 #처럼 모두 url인코딩을 한 후 전송을 해보았다.

진짜 flag값이 나왔다!!

클리어!!

---------------------------------------------------------------------------------------------------------------------
*from의 특징*

select 1,2,3,id,5 from table_name
==> table_name의 테이블 정보를 가져와서 1,2,3,id,5 속성을 출력 (이때 숫자로 표시된 거는 값도 똑같은 숫자로 출력됨, 문자도 마찬가지)

select 1,2,3,flag,5 from (select 1,2,flag,4,5 from table2_name limit 1,1)
==> (select 1,2,flag,4,5 from table2_name limit 1,1) 으로 완성된 테이블에서 1,2,3,flag,5 속성가져와서 출력

부족한 설명이지만 어쨌든 중요한 것은 from 뒤에 붙는 테이블의 속성값을 앞의 select 문에서 골라 출력한다는 점이다. 
따라서 위에 두 가지가 모두 옳바른 쿼리문이다.
---------------------------------------------------------------------------------------------------------------------

