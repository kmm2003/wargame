힌트를 보니 32비트 앱의 int 타입을 아느냐? 라는 질문을 하고 있다.

무슨 의도인지 잘 모르겠으니 문제에 접속해보자

문제에 접속해보니 두개의 값을 받는 것을 확인 할 수 있으며 소스를 보여주고있다.

소스를 보니 
1. 두 개의 값을 받아서 모두 int타입으로 변경 후
2. 첫번째 입력값을 인수로 /tmp/p7 이라는 프로그램을 실행하여 결과값을 result 변수에 넣는다.
3. result 값이 1이 아니면서 두번째 입력값이랑 같으면 문제가 해결된다.

int 타입에 대한 취약점을 검색해보니 별다른 수확이 없어서 고민하던 중 
아무 생각없이 ./p7.c를 디렉토리 리스팅 해보니 들어가졌다......;;;

p7.c의 코드를 볼 수 있게 되었는데 소스를 보니
1. 인자값을 정수형으로 변환 후 i변수에 넣고 i가 0보다 크면 통과
2. i+=5
3. i가 4보다 작으면 통과 
4. i가 5보다 작으면 값을 출력

위와 같이 진행이 되며 0을 return하게 되면 문제를 해결하기가 편할 것이다.
근데 문제는 0을 return 하려고 하니 소스의 1번 조건과 3번 조건을 동시에 만족하는 인자값을 
가질 수가 없다....

즉, 여기서 아마 힌트의 의도가 담긴 취약점을 이용해야 할 것으로 예상된다.

웹서핑을 해보니 int 오버플로우라는 취약점이 존재하는데 
int 오버플로우란? 
int타입이 가질 수 있는 최대 값이 2147483647(signed의 경우)인데
이 값을 넘기게 될 경우 오버플로우가 발생하게 되고 따라서 최저값으로 돌아가게 되는 현상을 말한다.

즉, 이번 문제는 int 오버플로우를 이용해 p7.c의 1과 3번 조건문을 동시에 통과시킬 수 있다.

예를 들어 2147483647을 첫번째 입력값으로 넣는다면 p7.c의 인자로 2147483647이 들어갈 것이고
당연히 0보다 크기 때문에 1번을 통과한다. 그 후 2147483647에 5를 더하는데 위에서 설명한 것 처럼 최대값을 넘어버려서 int 오버플로우에 의해 int타입의 가장 낮은 값으로 값이 이동하게 되고 따라서
-2147483644 가 되어서 3번 조건을 통과하게 될 것이다.
그 후 0이 리턴되어 result의 값이 0이 될 것이다.

input1은 2147483647을 input2는 0을 넣어보자.

???? 틀렸다???....????

왜 그런가 했더니 input1의 입력 최대자릿수가 9로 설정되어 마지막 하나가 씹혔었다 ㅎㅎ
코드를 수정 후 다시 넣어보니...

????????또 틀렸다?????????

흠....왜 그런가 고민하던 중 p7.c에서 마지막쯤에 -2147483644을 printf 하는데 혹시나 하는 마음에 input2로 이것을 넣어보니

클리어????됐다....?

함수를 실행한 것이 아니기 때문에 리턴값인 0이 아니라 exec함수로 p7.c를 실행 했고 그 결과로 printf로 출력된 값인 -2147483644이 php의 result 변수로 값이 저장된 것 같다.

클리어!!







