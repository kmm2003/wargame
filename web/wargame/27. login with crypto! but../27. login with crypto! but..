힌트를 보니 sucker_enc는 짜증난다? 라는 문구와 함께 로그인 할 수 있겠냐고 묻고있다.

문제에 접속하니 자동으로 값이 입력되있는 로그인 폼과 소스가 있다.

로그인 해보니 로그인은 성공했지만 admin이 아니여서 다시해야된다? 라고 하는 것 같다.
아마 admin으로 로그인하는 것이 문제인듯 하다.

소스를 보니
user값이 admin인 값으로 로그인 해야 flag값이 나오는데
그전에 $_POST['pass'] == get_password($_POST['user'],$_POST['ssn'])
라는 조건을 충족해야 한다.

get_password 함수를 보면
user, ssn 두 값 모두 mysql_real_escape_string 처리를 해주면서 인젝션을 방지해주고 있고
select user_ps from accounts where user_id='{$user}' and encrypt_ss='".sucker_enc($ssn)."'

위와 같은 쿼리를 실행한 후 결과값을 return한다. 이때 return하는 값이 $_pass 변수와 같은 값이여야 한다.

sucker_enc 함수를 보면
인자로 들어간 $_ssn 변수값을 enc라는 함수처리를 8번해주고 그 값을 return 하고있다.

enc 함수를 보니
$s_key라는 키값과 $_vector_iv라는 IV값을 이용해 인자로 들어온 $ssn 값을 3DES로 암호화 하여 해시값을 생성 후 base64 인코딩하고 그값을 hex binary 처리하여 return 하고있다.

간단하게 요약하면 ssn값을 3DES암호화를 8번하여 나온 값을 
select user_ps from accounts where user_id='{$user}' and encrypt_ss='".sucker_enc($ssn)."'
위 쿼리에 넣고 나오는 결과값이 $pass와 같으면 문제가 해결된다.

위 쿼리를 변조하는 것을 시도해보았으나 쉽지 않아 다른 방법을 생각해보던중
$_POST['pass'] == get_password($_POST['user'],$_POST['ssn'])의
느슨한 비교를 보고 여기서 취약점이 발생할 수도 있겠다고 생각했다.

쿼리 결과값을 mysql_fetch_array()를 통해 반환하고 있는데 만약 이 반환 값을 null로 만들 수 있다면 
$_POST['pass'] == get_password($_POST['user'],$_POST['ssn'])를
NULL == NULL 로 만들어 if문을 true로 통과가능할 것이다.

문제는 mysql_fetch_array($result)를 NULL로 어떻게 만드냐인데 
enc() 함수의 암호화 과정을 직접 한번 구현해 결과값을 여러번 도출해보니
넣는 평문값에 따라 결과값의 길이가 달라지는 것을 알 수 있다.

암호화 과정안에서 형변환에 따른 오버플로우가 발생할 수 있기 때문에 이 길이를 매우 길게 만들수 있다면 암호화 도중 오버플로우가 발생하여 쿼리문의 결과가 오류에 의해 false가 반환되고
따라서 mysql_fetch_array(false)는 null값을 반환하게 된다.

결론적으로 $user는 admin, $ssn 파라미터 값을 매우 큰 값을 넣고 $pass에 빈 값(null값)을 넣어서 보내면 
$_POST['pass'] == get_password($_POST['user'],$_POST['ssn'])는
NULL == NULL이 되어 admin의 계정으로 로그인이 될 것이다!!

python코드를 짜서 로그인을 시도해보았는데
처음에는 $ssn값에 '0'*1000000 의 값을 주었는데 허용된 메모리 사이즈를 넘은 값이 들어와 너무 커서 오류가 떴다고 뜬다. 그래서 오버플로우로도 안뚫리나? 했지만 혹시나해서 0하나를 줄여 '0'*100000 로 보내보니 이번에는 클리어되면서 flag값이 나왔다. (값이 너무크면 오버플로우 이전에 입력값? 크기 오류가 뜨는 것 같다.) (crypto.py)

클리어!!

 
