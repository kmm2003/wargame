sqli 문제로 테이블과 소스가 주어져있다. 

간단하게 소스를 해석하면

사용자가 검색하는 필터와 문구들을 체크하여 그에 맞는 쿼리를 할당시킨 후 where_clause 변수에 저장하고 
select * from board where {$where_clause} order by idx desc 
위 쿼리를 실행한다.

위 쿼리를 변조하여 인젝션을 하여 문제를 해결해야 할 것 같다.

검색을 하면 
search_cols, keyword, operator
세 가지의 파라미터를 전송하는데 
이때, {search_cols} like '%{keyword}%' {operator} 와 같은 식의 where_clause 변수가 
완성이되고 위에 있는 쿼리문에 들어가서 실행이 된다.

위와 같은 where_clause 변수가 들어가는 것을 우회하면서 인젝션을 시도해 보았으나 search_cols에 subject|content|writer 중 하나로 시작하는 값이 들어가지 않으면 search_cols 입력값 자체를 모두 지워버려 인젝션을 하기 힘들 것 같다. (참고로 keyword, operator 로는 인젝션이 어려울 거라고 미리 판단했다.)

코드를 더 살펴보았고 상단 부에 parse_str($_SERVER['QUERY_STRING']); 을
하는 것을 볼 수 있었다.

즉, 쿼리로 보낸 파라미터를 변수로 정의할 수 있다는 뜻이고 따라서 query_parts를 직접적으로 선언해주면서 {search_cols} like '%{keyword}%' 같은 쿼리문이 완성되지 않도록 우회 할 수 있다.

search_cols는 입력값을 주지 않고 query_parts를 파라미터 키로 하여 인젝션을 시도하면 
select * from board where $query_parts order by idx desc
위와 같은 쿼리가 실행되어 인젝션이 가능 할 것이다.

search_cols=&keyword=&operator=or&query_parts=idx=1
위와 같이 파라미터를 보낸 후
select * from board where idx=1 order by idx desc
위와 같은 쿼리를 실행하는 것을 테스트로 시도해보니 정상적으로 실행되었다!!

이번에는
select * from board where idx=0 union select 1,2,3,4 #order by idx desc
위와 같은 union injection 쿼리를 만들어 테스트 해보니 이번에도 정상적으로 실행됬다.

이제 위에서 테스트한 union injection 방식을 이용해 테이블, 속성, flag값까지 모두 구해보겠다.

테이블 길이를 구하는 도중 난관에 봉착하였는데 이유는 모르겠으나 limit 함수가 먹히지 않는 것을 확인했다. 그러나 다행인 것은 php코드에서 쿼리문에 대해 응답된 모든 레코드 정보를 테이블형태로 반환해주기 때문에 limit 없이 테이블의 갯수가 2개라는 것을 알아냈고 
따라서 limit 함수를 사용할 수 없기 때문에 max,min함수로 우회하여 테이블 정보를 알아냈다.

max를 이용해 첫번째 테이블을 구해보니 16자리의 Th1s_1s_Flag_tbl 이라는 테이블이 나왔다.
딱봐도 여기에 flag값이 있을 것 같기 때문에 바로 속성값을 구해보도록하겠다.

속성이 여러개 있을까 걱정이 되었으나 다행히도 위 테이블의 속성은 하나였다. 바로 구해보겠다.
f1ag라는 속성이 나왔다.

flag값을 구해보자

클리어!

....풀고나서 안 사실...
이렇게 어렵게 해결할 필요가 없는 문제였다...
에초에 쿼리를 보내면 테이블 형태로 문자열 값 전체가 우리한테 보이는 형태의 문제였기 때문에
테이블이든 속성이든 flag든 그냥 쿼리 한번씩만 보내서 문자열 전체를 받으면 되는 문제였다.....ㅅㅂ......







