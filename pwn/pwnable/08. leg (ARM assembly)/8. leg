이번 문제는 문제의 파일이 주어져있다.

leg.c의 소스를 보자.
1. key1,2,3 라는 함수가 3개 존재하는데 모두 어셈블리어 코드의 형태를 띄고있다.
2. 사용자에게 key값을 입력받으며 이 값이 key1()+key2()+key3()의 값과 같으면 문제가 해결된다.

leg.asm 소스를 보니 각 함수의 어셈블리어 코드가 있다.
아마 gdb로 디버깅이 불가능하니 주어진 소스인 것 같다.

leg.asm을 봐보자
코드를 전체적으로보니 %가 안써있는 걸로봐서 intel 형식의 코드로 추정된다.
main 부분을 보자
main+44 key1()이후 r0를 r4로 옮긴다.
main+52 key2() 이후 r0를 r3로 옮기고 r4=r4+r3를 한다.
main+64 key3() 이후 r0를 r3로 옮기고 r2=r4+r3를 한다.
main+76 r3에 새로운 값을 넣는다.
main+80 r2와 r3를 비교한다.

이렇게 코드가 구성되어있는데
r2가 key1,2,3 함수 후 r0값 3개를 더한 값이라는 것을 알 수 있고
따라서 r2가 key1()+key2()+key3()이며 r0는 각각의 return값임을 알 수 있다.

여기서 잠시 ARM assembly에 대하여 집고 넘어가자
-------------------------------------------------------------------------------------------
ARM CPU의 기본구성
1. r0~r14 까지 총 15개의 범용 레지스터를 가지고 있다.
2. r13은 특수레지스터 SP로 사용된다.
3. SP는 스택의 주소를 저장하는 레지스터
4. LR은 함수호출시 return할 코드의 주소를 가진 레지스터
5. PC는 fetch 과정중인 코드의 주소를 가진 레지스터
자세한 참고 주소
* https://kyuhyuk.kr/article/simple-arm-operating-system/2019/03/04/Simple-ARM-Operating-System-Chapter-2
-------------------------------------------------------------------------------------------
즉, 위에서 다룬 것을 비교해보면 우리가 받은 어셈블리어 코드는 ARM assembly임을 알 수 있다.

key1()을 보면
key1+12 에서 r0에 r3값을 넣고 있는데 
key1+8 에서 보면 r3에 pc라는 값을 넣고 있다.

결국 key1()의 return값이 pc라는 값인데
여기서 pc라는 값이 무엇인지 먼저 알아야 한다.

--------------------------------------------------------------------------------------------

pc가 무엇인지 알기전에 cpu의 명령어 처리 과정을 알아야하는데
cpu는 명령어 하나를 수행할 때 fetch > decode > execute 과정을 거친다고 한다.
이런식의 과정을 거치기 때문에 명령어 처리는 병렬적으로 이루어지게되는데

  1       2       3         4
fetch decode execute
       fetch  decode  execute

위와 같이 이루어져 2개의 명령을 6번이 아닌 4번으로 작업을 줄여 효율적으로 작업을 할 수 있다.
(기하급수적으로 갯수가 많아지면 훨씬 효율적일 것이다.)

보통 execute 과정이라고 하면 실제로 코드가 실행되는 과정인데
이게 무슨말이냐면 쉽게 말하면 우리가 코드를 읽을때 순서대로 코드를 머리속으로 실행하며 이런 동작을 거친다 생각하고 읽는데 실제로 동작이 실행되는 그 과정이 execute 과정이라고 생각하면 된다.

우리가 알아야 할 pc는 fetch하는 주소를 담고있는 레지스터이다.
따라서 fetch는 execute 보다 두 단계 전 과정임으로 지금 execute하고 있는 코드 다다음 코드의 주소라고 생각하면 된다.

--------------------------------------------------------------------------------------------

즉, 다시 key1함수로 돌아와서 
main+8에서 r3에 pc를 넣고 있음으로 pc는 다다음 코드인 main+16 즉,0x00008ce4를 의미한다.

key2로 가보자
key2는 r0에 r3라는 값이 들어가는데 그전에 r3에 pc+#4 즉, 0x00008d08+4를 넣고 있다.

key3에서는 최종적으로 lr이라는 값을 r0에 넣고 있는데 lr은 함수 호출시 되돌아갈 주소를 담고있는 레지스터라고 한다.
즉, main에서 key3() 호출 이후 인 0x00008d80를 의미한다.

지금까지 얻은 정보를 얻으면 우리가 입력해야될 key값은 다음과 같다.
0x00008ce4+0x00008d08+4+0x00008d80 = 0x0001A770

여기서 주의해야 될 점은 우리가 입력하는 key값은 int형이기 때문에 입력할때 위의 최종입력값을 10진수로 변환하여 입력해주어야 한다.

따라서 최종입력값은 108400

입력해보자

클리어!!
 
