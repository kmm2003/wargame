힌트를 보니 이미 힌트를 알려줬다는 얘기를 한다.

아마 제목이 shellshock인 것을 봐서 제목으로 힌트를 알려줬다는 의미인 것 같다.

문제에 접속해 소스를 보았다.
shellshock_pwn이라는 사용자의 권한으로 세팅 후
system()을 이용해 bash 명령어를 실행하고 있다.

우선 딱히 눈에 띄는 취약점이 보이지 않아서 
쉘쇼크에 대해 찾아보니
bash 쉘의 환경변수 취약점을 이용한 공격이였다.

리눅스는 기본적으로 set명령어를 이용하여 변수를 선언하고 사용 할 수 있는데
만약 로그인 쉘에서 변수를 생성 후 
/bin/bash로 서브 쉘을 생성하여 서브 쉘에서 변수를 호출하려고 하면
호출되지 않는다. (즉, 여기서 set으로 생성한 변수는 지역변수)

이러한 경우를 대비해서
리눅스는 export 명령어를 이용하여 환경변수를 선언할 수 있고 
환경변수는 로그인 쉘, 서브 쉘 두 곳 모두에서 사용할 수 있다.(즉, 전역변수)

환경변수는 아래와 같이 선언할 수 있다.
ex) export x='welcome to pwnable!'

bash 쉘을 이용해 명령어를 실행 할 때 환경변수로 선언한 것들을 변수로 사용할 수 있다.
ex) echo $x ==> 'welcome to pwnable!'

이런 환경변수를 선언할때 단순히 변수 뿐만 아니라 함수도 선언할 수 있다.
ex) x() { echo hi;} (참고: {다음에 띄어쓰기 안하면 에러생긴다;;)

만약 다음과 같이 선언하면 일반 변수로 선언될 뿐 함수로 선언되지는 않는다.
export x='() { echo welcome; }'

그러나 여기서 버그가 생기는데 이렇게 선언한 이후 bash를 실행하면 환경변수들이 초기화가 되는데
이때, 위의 변수가 함수로 바뀌는 버그가 생긴다!!

여기서 더 나아가
export x='() { echo welcome;}; pwd;'
위 처럼 코드를 선언한다면 bash를 실행하여 환경변수가 초기화가 될 때 뒤쪽에 있는 명령어가 자동으로 실행되는 취약점이 생기게 된다!! 

이 취약점을 쉘쇼크라고 한다!!

즉, 위와 같은 환경변수를 선언하고 bash를 실행하면 환경변수들이 초기화 될때 pwd명령이 실행되게 될 것이다.

지금까지 쉘쇼크에 대해 알아보았고 
이것을 어떻게 이용할까 생각해보니 shellshock 프로그램 코드에는 bash를 실행하는 것을 우리가 보았음으로 미리 우리가 flag 파일을 읽는 명령어를 삽입한 환경변수를 선언하고 
shellshock 프로그램을 실행하면 자동으로 flag 파일을 읽어서 자동으로 내용이 출력될 것이다!!

export x='(){ echo welcome;}; /bin/cat flag'

위와 같이 환경변수 선언 후 shellshock 프로그램을 실행해보자!!

클리어!!

