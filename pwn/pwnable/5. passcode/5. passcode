힌트를 보니 passcode 기반의 로그인 시스템을 만들었고
C코드 컴파일 과정에서 에러는 없었지만 경고가 떴다고 한다.
하지만 본인은 신경 안쓴다? 는 것 같다.

뭔소린지 잘 모르겠으니 일단 문제에 접속하자

passcode 와 passcode.c 가 보인다.

passcode.c를 분석해보자
1. welcome 함수를 통해 name[100]을 선언하고 100바이트만큼 scanf로 입력받고있다.
2. login 함수를 통해 passcode1, passcode2 라는 값을 입력받고 두 값이 각각 338150, 13371337이면 문제가 해결된다.

그러나 여기서 문제가 보인다.
바로 scanf를 통해 passcode1과 passcode2를 입력받을 때 첨자가 붙어있지 않다는 것이다.
ex) &a는 a의 주소를 의미함 

첨자가 붙어있는 경우와 아닌 경우의 차이의 예제는 다음과 같다.

정상 코드) 
int passcode1; passcode1= 쓰레기 값 \xabcdef
scanf("%d", &passcode1); passcode1 변수에 입력한 값 대입됨.

문제의 코드)
int passcode1;   // passcode1= 쓰레기 값 ex. \xabcdef
scanf("%d", passcode1); \xabcdef이라는 주소에 입력받은 값 저장

위 설명을 좀 더 보충하면
--------------------------------------------------------------------------
data 영역
 주소        변수명      변수값
\xffbbee passcode1 \xabcdef

1.정상코드의 경우(입력값은 123이라 가정)

data 영역
 주소        변수명      변수값
\xffbbee passcode1    123

scanf('%d',\xffbbee);

2. 문제의 코드의 경우

data 영역
 주소        변수명      변수값
\xffbbee passcode1  \xabcdef
...............................
...............................
...............................
\xabcdef   ?????      123

scanf('%d',\xabcdef);

즉,
scanf('%d',[주소값]); ==> 해당 주소의 변수값을 입력값으로 바꾼다.
--------------------------------------------------------------------------
위와 같은 방식으로 저장된다는 차이가 있다!

따라서 문제의 아래의 코드의 경우
scanf('%d',passcode1);

passcode1 변수에 입력값을 넣는 것이 아니라 더미주소의 변수에 값을 넣게 된다.

이렇게 실행되다보면 결국 프로그램 오류가 발생하게 된다.

여기서 만약 passcode1의 값을 더미값이 아닌 내가 원하는 주소로 바꿀 수 있다면
원하는 주소에다가 원하는 값을 씌울 수 있을 것이다.
여기가 취약점이 될 가능성이 높아보인다.

대충 코드의 상황을 알았으니
gdb로 디버깅을 해보자

welcome 함수를 통해 분석한 stack의 상황은 다음과 같다.
dummy 24
name 100 ebp-0x70
dummy 12 ebp-0xc
fpo 4
ret 4

login 함수를 통해 분석한 stack의 상황은 다음과 같다.
passcode1 4 epb-0x10
passcode2 4 ebp-0xc
dummy 10
fpo 4
ret 4

위와 같이 stack의 상황을 함수별로 정리해보았다.

만약 welcome에서 name[100]의 입력을 받을때 passcode1의 값을 원하는 주소로 변경해 줄 수 있다면 우리의 공격 시나리오가 완성될 것이다.

gdb 분석을 통해 ebp값을 확인해 보니 welcome , login 두 함수의 ebp값이 모두 같았다.

즉, name에서 마지막 4바이트 값이 passcode1의 값으로 덮어씌어질수 있다는 의미이다.
(ebp값이 같고 ebp값을 중심으로 주소를 계산해 보았을때 name의 마지막 4바이트와 passcode1의 주소가 같기 때문이다.)

공격 페이로드를 짜면 다음과 같을 것이다.

'\x90'*96+[원하는 주소]

이제 여기서 원하는 주소로 무엇을 쓸 것이냐인데

login 함수에서 
scanf 다음 코드를 보면
fflush(stdin)을 실행하는 것을 알 수 있다.

fflush() 함수는 파일 포인터인 스트림을 매개변수로 받아 출력버퍼를 비워주는 함수인데, 입력 버퍼에 남아 있는 문자를 비우기 위해 fflush(stdin)의 방식으로 사용하기도 한다.
(아마 제작자의 의도는 passcode1과 passcode2을 모두 입력받기위해 이 함수를 사용했을 것이다.)

여기서 만약 fflush()를 실행할 때 fflush() 대신에 system("/bin/cat flag") 가 실행되게 덮어쓴다면 flag값을 얻을 수 있을 것이다!

바로 위의 설명과 최종 공격시나리오를 이해하기 위해서는 PLT와 GOT의 개념에 대한 이해가 필요하다.
-------------------------------------------------------------------------------------------------------------------------
PLT와 GOT를 간략하게 설명하자면 이렇다.

PLT (Procedure Linkage Table) : 외부 프로시저를 연결해주는 테이블. PLT를 통해 다른 라이브러리에 있는 프로시저를 호출해 사용할 수 있다.

GOT (Global Offset Table) : PLT가 참조하는 테이블. 프로시저들의 주소가 들어있다.

어떤 소스파일을 실행파일로 만들기 위해서 컴파일(compile)이라는 과정을 거치는데, 컴파일을 하면 오브젝트 파일이 생성된다. 가령 소스파일에 printf함수가 사용되었다고 한다면, 단순히 이 오브젝트 파일만으로는 실행이 불가능하다. printf의 구현 코드를 모르기 때문이다. 따라서 이 오브젝트 파일을 실행하려면 printf의 실행코드를 찾아서 오브젝트 파일과 연결시켜야 한다. printf의 실행코드는 printf의 구현 코드를 컴파일한 오브젝트 파일로, 이런 오브젝트 파일들이 모여있는 곳을 라이브러리라고 한다. 이렇게 라이브러리 등 필요한 오브젝트 파일을 연결시켜주는 작업을 링킹(Linking)이라 하며, 이 링크 과정을 거치면 최종적 실행파일이 생긴다. 링킹 방식에는 Static과 Dynamic방식이 있다.

Static Link방식은 파일 생성 시 라이브러리 내용을 포함한 실행 파일을 만든다.

Dynamic Link 방식은 공유 라이브러리를 사용한다. 라이브러리를 하나의 메모리 공간에 매핑하고 여러 프로그램에서 공유하여 사용한다.

Dynamic Link 방식에서 PLT와 GOT를 사용한다. Dynamic Link방식으로 컴파일 하면 라이브러리가 프로그램 외부에 있기 때문에 함수의 주소를 알아오는 과정이 필요하기 때문이다.

Dynamic Link 방식으로 만들어진 프로그램에서는 함수를 호출할 때 PLT를 참조한다. 

PLT에서는 GOT로 점프하게 되고, GOT에 라이브러리에 존재하는 실제 함수의 주소가 있어서 이 함수를 호출할 수 있게 되는 것이다.

즉, dynamic link 방식을 사용하는 경우
외부 라이브러리의 함수를 사용하기 위해서
PLT에 저장되어있는 함수의 주소를 참조해야 하고
그 주소로 이동하여 함수를 실행하게 된다.

*PLT,GOT 실행 과정(fflush 함수라고 가정)
PLT(fflush@plt)를 CALL -> PLT에 저장되어있는 GOT 주소(fflush@got.plt)로 점프 -> GOT(fflush@got.plt)에 저장되어 있는 함수 주소를 통해 함수를 CALL 하여 실행
------------------------------------------------------------------------------------------------------------------------

즉, 우리는 fflush 함수의 GOT 값을 system("/bin/cat flag") 함수가 실행되는 주소로 바꿔주면
system("/bin/cat flag")가 실행되는 주소가 CALL 되어 flag값이 출력될 것이다!!

최종 공격시나리오를 설명하면 다음과 같다.
1. name[100]을 입력받을때 passcode1을 fflush@got.plt 주소로 조작
==> '\x90'*96+[fflush@got.plt 주소] 페이로드 실행
2. system("/bin/cat flag") 이 실행되는 주소를 10진수로 입력
(passcode1은 int형으로 10진수로 값을 받기 때문이다.)

위의 공격시나리오를 실행하기 위해서는 fflush@got.plt의 주소와 system("/bin/cat flag") 명령이 실행되는 주소를 알아야한다.

gdb로 디버깅하여 알아내보자
fflush@got.plt 주소 ==> 0x804a004
system("/bin/cat flag") 주소 ==> 0x080485e3 (이 주소로 선정한 이유는 system 함수의 인자를 넣어주는 명령어 부분이기 때문이다.)

최종 페이로드는
1. (python -c'print "\x90"*96+"\x04\xa0\x04\x08"';cat)|./passcode
2. 134514147 입력

페이로드 대로 해보자

flag가 뜬다.

클리어!!

